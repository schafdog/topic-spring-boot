package com.schafroth.app.topic;

import java.util.HashSet;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class TopicController {
	Logger logger = LoggerFactory.getLogger(TopicController.class);
	@Autowired // This means to get the bean called topicRepository
	private TopicRepository topicRepository;
    // Which is auto-generated by Spring, we will use it to handle the data

	@Autowired
	private TopicReplyRepository replies;


	@GetMapping("/topic/new")
	public String topicForm(Model model) {
		model.addAttribute("topic", new Topic());
		return "topic";
	}

	@GetMapping("/topic")
	public String topics(Model model) {
		model.addAttribute("topics", topicRepository.findAll());
		return "result";
	}

	@PostMapping("/topic")
	public String topicSubmit(@ModelAttribute Topic topic, Model model) {
		/* Validate and persist new topic before showing result */
		topicRepository.save(topic);
		model.addAttribute("topics", topicRepository.findAll());

		return "redirect:/topic";
	}

	@GetMapping("/topic/{id}/reply")
	public String topicReplyForm(@PathVariable long id, Model model) {
		TopicReply reply = new TopicReply();
		Topic topic = topicRepository.findById(id).get();
		reply.setTopic(topic);
		model.addAttribute("reply", reply);
		return "topic_reply";
	}

	@PostMapping("/topic/{id}/reply")
    public String replySubmit(@PathVariable long id, @ModelAttribute TopicReply reply, Model model) 
    {
    	/* Validate and persist new topic before showing result */
    	 
    	Topic topic = topicRepository.findById(id).get();
    	reply.setTopic(topic);
    	replies.save(reply);
    	
    	emailReply(reply, topic);
    	
     	model.addAttribute("topics", topicRepository.findAll());
    	return "redirect:/topic";
    }

	@Autowired
	private ReplyEmailSender sender;
	
	private void emailReply(TopicReply reply, Topic topic) {
		// ensure we do not send out messages repeated message by adding to a Set
		Set<String> emails = new HashSet<String>();

		// Only add if not from topic owner
		if (!topic.getEmail().equals(reply.getEmail()))
			emails.add(topic.getEmail());
		// Only add if not from reply owner
		for (TopicReply aReply : topic.getTopicReplies()) {
			if (!aReply.getEmail().equals(reply.getEmail()))
				emails.add(aReply.getEmail());
		}
		
		for (String email : emails) {
			sender.send(new ReplyEmail(reply, email));
		}
	}
}